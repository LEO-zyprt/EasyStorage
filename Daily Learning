# EasyStorage

chr(66) # number to character
ord('string') # character to number

x = b'ABC'
'ABC'.encode('ascii')
'中文'.encode('utf-8')  #汉字没有ascii

b'ABC'.decode('utf-8') # get ABC
b'\xe4\xb8\xad\xff'.decode('utf-8', errors = 'ignore')

#!/usr/bin/env python3
#-*- coding: utf-8 -*-  当源代码存在中文的时候

# 格式化 %f:float %x:十六进制
'Hi, %s, you have $%d.' % ('Michael', 1000000)
'%d-%02d' % (3, 1) #2是为了空出位，0是为了用0补位
'%.2f' % 3.1415926 #保留两位小数

'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125) 

r = 2.5 s = 3.14 * r ** 2
print(f'The area of a circle with radius {r} is {s:.2f}')

example 
r = (85-72)/72*100
print('小明的成绩提升了%.1f%%'% r)
print(f'小明的成绩提升了{r:.1f}%')
print('小明的成绩提升了{0:.1f}%'.format(r))

# list
list.append('adam') 插在末尾
list.insert(1, 'adam') 插在位置是index = 1 的地方
list.pop() 删除最后一位
list.pop(1) 删除指定索引的元素
list[1] = 'adam' 替换

# tuple
a = () 是一个空tuple
定义一位元素的tuple的时候，一定要加逗号避免歧义
tuple里面有list的情况，可以对list里面的数值进行重新赋值，tuple的list也会发生变化

#break结束循环
#continue结束本轮循环，进入下轮循环

# d是一个字典
'Tomas' in d #去判断d中有没有tomas这个key
d.pop('Tomas') #去删除key以及对应的value
dict的key必须是唯一不变的，根据哈希算法。所以list是不能作为key的

# set需要以list作为输入集合，删除重复项//无序和无重复的集合
set([1,2,3])
set.add(4)
set.remove(4)
S1&S2 #交集
S1 | S2 #并集

# def定义函数
#isinstance(x, (int, float)): 判断x是不是后面int或者是float的数据类型
#为了使得我们定义的函数更加完善，那么我们可以添加报错类型
def my_abs(x):
  if not isinstance(x, (int, float)):
    raise TypeError('bad operand type')
  if x >= 0:
    return x
  else:
    return -x
    
#another def    
import math
def quadratic(a, b, c):
    if not isinstance(a, (int, float)):
        raise TypeError('bad operand type')
    if not isinstance(b, (int, float)):
        raise TypeError('bad operand type')
    if not isinstance(c, (int, float)):
        raise TypeError('bad operand type')  
    if a == 0:
        raise TypeError('a should not be assigned as 0')
    if b**2 == 4*a*c:
        return -b/(2*a)
    if b**2 < 4*a*c:
        print('no results')
    if b**2 > 4*a*c:
        x_1 = (-b + math.sqrt(b**2-4*a*c))/(2*a)
        x_2 = (-b - math.sqrt(b**2-4*a*c))/(2*a)
        return x_1, x_2

# 定义函数，默认参数
def power(x, n = 2):   #如果不输入n=2的话，就默认是2
  y = x ** n
  return y 
#有一点需要注意，默认参数必须指向不变对象
def add_end(L= none):
  if L = none:
    L = []
  L.append('end')
  return L
  
# 可变参数 定义可变参数的好处是不需要输入list或者tuple
def calc(*numbers):
  sum = 0
  for i in numbers:
     sum = sum + n**2
  return sum #但是存在的问题是，如果numbers是个list或者是tuple, 那么在calc()中输入的参数为calc(*numbers)去解决这个问题

# 关键字参数  kw输出的时候是一个字典
def person(name, age, **kw):
   print('name:', name, 'age:', age, 'other:', kw)
person('tom', 35', city='manchester')
>> name:tom age:35 other:{'city':'manchester'}

def person(name, age, *, city, job) #*号后面的都是关键参数，因此在用该函数的时候需要输入关键参数名称
def person(name, age, *args, city, job) #这种情况下，*args是一个可变参数，可变参数后面的参数全部为关键参数，输入时需要输入关键参数名称

# 参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数
# 我的理解是命名关键字参数，这个关键字参数是可选的，可有可无
# 可变参数得到一个tuple
# 关键字参数有个奇特的地方是，会返回出一个dict
def f2(a, b, c=0, *, d, **kw): 这个里面的d就是命名关键字参数，**kw就是关键字参数

# Exercise
def product(*arg):
    if len(arg) == 0:
       raise TypeError('No Input')
    
    for i in arg:
        if not isinstance(i, (float, int)):
           raise TypeError('bad operand type')
        else:
           y = 1
           for i in arg:
               y = y*i
    return y

# 递归函数
def factor(n):
  if n == 1:
    return 1
   return n*factor(n-1) #但是这种方法会导致函数的多次调用，导致栈溢出
# 尾递归优化
def fact(n):
  return fact_iter(n,1)
def fact_iter(number, product):
  if number == 1:
    retrun product
  return fact_iter(number-1, number*product) #在函数调用前就就返回了product和number，不会影响函数调用
  
#汉诺塔游戏
#可以将A盘的金片看最底下一个，和上面的n-1个
#最下面的一个从A到C盘；上面的n-1个借助B做缓冲到C盘
def move(n, a, b, c):
    if n == 1:
        print('move', a, '>>', c)
    else:
        move(n-1, a, c, b)
        move(1, a, b, c)
        move(n-1, b, a, c)
move(3, 'A', 'B', 'C')

#迭代
for k in dic:
    print(k)  #这样就会type出key值
for k in dic.values() #这样会type出value值
for k,v in dic.items() #这样会type出key和value值

for key, value in enumerate(['A', 'B', 'C']):  # enumerate是将list有对应的索引，key就是索引
    print(key, value)
    
for x,y in [(1,2),(3,4),(4,5)]:
    print(x,y)
    
# 生成器
g = (x*x for x in range(10)) #这样g就是一个生成器，这样可以下次可以直接调用，for n in g

# 斐波拉契数列
def lib(max):
    n,a,b = 0,0,1
    while n < max:
        print(b)  #如果希望将该函数变为一个生成器，那么就不要print出来，直接改为yield b yield加不加括号都可
        a, b = b, a+b
        n += 1
    return 'done'
# generator当中遇到yield就中断，下次又继续执行

#如果想拿到lib的返回值：
#def lib(max):
#    n,a,b = 0,0,1
#    while n < max:
#       yield(b)  
#        a, b = b, a+b
#       n += 1
#    return 'done'

g = lib(6)
while True:
    try:
        x = next(g)
        print('g:', x)
    except StopIteration as e:
        print('Retrun Value:', e.value)
        break
        
#map的使用和reduce的使用，map是依次，reduce是在之前的基础上继续。      
list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
['1', '2', '3', '4', '5', '6', '7', '8', '9']

#将'13579'转化为int类型3579
from functools import reduce
def fn(x,y):
    return 10*x + y
def ff(s):
    digits = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}
    return digits[s]
result = reduce(fn, map(ff, '13579'))
print(type(result))
>>int
以上的'13579'是按照次序一个个进入map中的ff函数的，依次进去输出形成fn所需要的元素

#上面的问题用lambda也同样可以解决
from functools import reduce
digits = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}
def char2num(s):
    return digits[s]
def str2int(s):
    return reduce(lambda x, y: x*10+y, map(char2num, s))
result = str2int('12345')
print(type(result))
>>int
练习还没做

        
  
        
 
        
   


    


